#!/bin/sh

USE_XARGS=1
CORES=4
TESTMODE=0

trap clean EXIT
trap exit INT

function clean () {
  title clean
  [ -d "$current_tmpdir" ] && /bin/rm -rf "$current_tmpdir"
  [ "$LOCKED" = 1 ] && /bin/rm "$LOCKFILE"
}

function die () {
  echo "$1"
  exit 1
}

function filter () {
  sort | \
    if [ "$TESTMODE" = 1 ]
    then
      head -n 10
    else
      cat
    fi
}

function title () {
  echo -e "\033[40m\033[1;34m$1\033[0;39m"
}


LOCKFILE="/tmp/cbz-make.lock"
LOCKED=0

function lock () {
  if [ -e "$LOCKFILE" ]
  then
    title "wait other tasks"
    while [ -e "$LOCKFILE" ]
    do
      sleep 2
    done
  fi
  touch "$LOCKFILE"
  LOCKED=1
}

function main () {

  local curdir=`pwd`
  local src="$1"
  [ -z "$src" ] && die "Usage: $0 <PDF_FILEPATH>"

  local ext=`echo ${src##*.} | tr A-Z a-z`
  local filename=`basename "${src%.*}"`
  local fullpath=`echo $(cd $(dirname "$src") && pwd)/$(basename "$src")`

  title "     start     "
  echo "$filename"
  echo "$fullpath"

  # if expr "$fullpath" : ".*\(light\)" > /dev/null
  # then
  #   local sub="sd"
  # else
  #   local sub="main"
  # fi
  local sub="sd"

  # dst=`dirname "$src"`/"${filename}.cbz"
  local dst=/media/data/device/kobo-aura/"$sub"/"${filename}.cbz"

  title "mktemp"
  local tmpdir=`mktemp -d` || die "Could not make temp dir"
  current_tmpdir="$tmpdir"

  title "mkdirs"
  mkdir "$tmpdir/original" || die "Could not make directory: original"
  mkdir "$tmpdir/resized" || die "Could not make directory: resized"
  mkdir "$tmpdir/unpack" || die "Could not make directory: unpack"

  case "$ext" in
    pdf)
      title "pdfimages"
      pdfimages "$src" "$tmpdir/original/pdf"
      ;;
    zip|rar)
      title "unpack"
      aunpack -q -X "$tmpdir/unpack/" "$src"
      # unzip -q -j -d "$tmpdir/unpack/" "$src"
      find "$tmpdir/unpack/" -type f | sort | nl -w4 -n rz -s : | while read it
      do
        num=`echo "$it" | cut -d: -f1`
        ext=`echo "${it##*.}"`
        path=`echo "$it" | cut -d: -f2-`
        mv "$path" "$tmpdir/original/${num}.${ext}"
      done
      ;;
  esac

  title "resize"
  cd "$tmpdir/original"
  if [ "$USE_XARGS" = 1 ]
  then
    find -type f | filter | while read it
    do
      if [ -f "$it" ]
      then
        local itdir=../resized/`dirname "$it"`
        [ -d "$itdir" ] || mkdir -p "$itdir"
        local png="${it%.*}.png"
        local out="\"../resized/$png\""
        # /tmp/xmosh/echo-args
        # 小さすぎる出力は失敗の可能性が高い。 -gt 2000
        echo "cbz-convert \"$it\" $out"
      fi
    done | parallel --eta -P "$CORES" sh -c
  else
    find -type f | filter | while read it
    do
      if [ -f "$it" ]
      then
        local itdir=../resized/`dirname "$it"`
        [ -d "$itdir" ] || mkdir -p "$itdir"
        local png="${it%.*}.png"
        convert $OPTIONS "$it" "../resized/$png"
      fi
    done
  fi

  title "apack"
  cd "$tmpdir/resized"
  [ -f "$dst" ] && /bin/rm "$dst"
  apack -q -F zip "$dst" $(ls *.* | sort -n)


  title "clean"
  /bin/rm -rf "$tmpdir"

  title "finish"
  echo "Generated in: $dst"

  cd "$curdir"

  # REF
  # mieki256's diary - ImageMagickとシャープ化
  # http://blawat2015.no-ip.com/~mieki256/diary/2004112610.html
  #
  # ImageMagick: Command-line Tools: Convert
  # http://www.imagemagick.org/script/convert.php
}


lock
for filepath in "$@"
do
  main "$filepath"
done
